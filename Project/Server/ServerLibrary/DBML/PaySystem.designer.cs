#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AbonentPlus.PaySystem.Server.PaySystemORM
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SQLTEST_MSSQL")]
	public partial class PaySystemDataBase : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertABONENT(ABONENT instance);
    partial void UpdateABONENT(ABONENT instance);
    partial void DeleteABONENT(ABONENT instance);
    partial void InsertDISREPAIR(DISREPAIR instance);
    partial void UpdateDISREPAIR(DISREPAIR instance);
    partial void DeleteDISREPAIR(DISREPAIR instance);
    partial void InsertEXECUTOR(EXECUTOR instance);
    partial void UpdateEXECUTOR(EXECUTOR instance);
    partial void DeleteEXECUTOR(EXECUTOR instance);
    partial void InsertNACHISLSUMMA(NACHISLSUMMA instance);
    partial void UpdateNACHISLSUMMA(NACHISLSUMMA instance);
    partial void DeleteNACHISLSUMMA(NACHISLSUMMA instance);
    partial void InsertPAYSUMMA(PAYSUMMA instance);
    partial void UpdatePAYSUMMA(PAYSUMMA instance);
    partial void DeletePAYSUMMA(PAYSUMMA instance);
    partial void InsertREQUEST(REQUEST instance);
    partial void UpdateREQUEST(REQUEST instance);
    partial void DeleteREQUEST(REQUEST instance);
    partial void InsertSERVICES(SERVICES instance);
    partial void UpdateSERVICES(SERVICES instance);
    partial void DeleteSERVICES(SERVICES instance);
    partial void Insert
			(STREET instance);
    partial void UpdateSTREET(STREET instance);
    partial void DeleteSTREET(STREET instance);
    #endregion
		
		public PaySystemDataBase(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PaySystemDataBase(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PaySystemDataBase(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PaySystemDataBase(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ABONENT> ABONENT
		{
			get
			{
				return this.GetTable<ABONENT>();
			}
		}
		
		public System.Data.Linq.Table<DISREPAIR> DISREPAIR
		{
			get
			{
				return this.GetTable<DISREPAIR>();
			}
		}
		
		public System.Data.Linq.Table<EXECUTOR> EXECUTOR
		{
			get
			{
				return this.GetTable<EXECUTOR>();
			}
		}
		
		public System.Data.Linq.Table<NACHISLSUMMA> NACHISLSUMMA
		{
			get
			{
				return this.GetTable<NACHISLSUMMA>();
			}
		}
		
		public System.Data.Linq.Table<PAYSUMMA> PAYSUMMA
		{
			get
			{
				return this.GetTable<PAYSUMMA>();
			}
		}
		
		public System.Data.Linq.Table<REQUEST> REQUEST
		{
			get
			{
				return this.GetTable<REQUEST>();
			}
		}
		
		public System.Data.Linq.Table<SERVICES> SERVICES
		{
			get
			{
				return this.GetTable<SERVICES>();
			}
		}
		
		public System.Data.Linq.Table<STREET> STREET
		{
			get
			{
				return this.GetTable<STREET>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ABONENT")]
	public partial class ABONENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ACCOUNTCD;
		
		private System.Nullable<int> _STREETCD;
		
		private System.Nullable<short> _HOUSENO;
		
		private System.Nullable<short> _FLATNO;
		
		private string _Fio;
		
		private string _PHONE;
		
		private EntitySet<NACHISLSUMMA> _NACHISLSUMMA;
		
		private EntitySet<PAYSUMMA> _PAYSUMMA;
		
		private EntitySet<REQUEST> _REQUEST;
		
		private EntityRef<STREET> _STREET;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnACCOUNTCDChanging(string value);
    partial void OnACCOUNTCDChanged();
    partial void OnSTREETCDChanging(System.Nullable<int> value);
    partial void OnSTREETCDChanged();
    partial void OnHOUSENOChanging(System.Nullable<short> value);
    partial void OnHOUSENOChanged();
    partial void OnFLATNOChanging(System.Nullable<short> value);
    partial void OnFLATNOChanged();
    partial void OnFioChanging(string value);
    partial void OnFioChanged();
    partial void OnPHONEChanging(string value);
    partial void OnPHONEChanged();
    #endregion
		
		public ABONENT()
		{
			this._NACHISLSUMMA = new EntitySet<NACHISLSUMMA>(new Action<NACHISLSUMMA>(this.attach_NACHISLSUMMA), new Action<NACHISLSUMMA>(this.detach_NACHISLSUMMA));
			this._PAYSUMMA = new EntitySet<PAYSUMMA>(new Action<PAYSUMMA>(this.attach_PAYSUMMA), new Action<PAYSUMMA>(this.detach_PAYSUMMA));
			this._REQUEST = new EntitySet<REQUEST>(new Action<REQUEST>(this.attach_REQUEST), new Action<REQUEST>(this.detach_REQUEST));
			this._STREET = default(EntityRef<STREET>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCOUNTCD", DbType="VarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ACCOUNTCD
		{
			get
			{
				return this._ACCOUNTCD;
			}
			set
			{
				if ((this._ACCOUNTCD != value))
				{
					this.OnACCOUNTCDChanging(value);
					this.SendPropertyChanging();
					this._ACCOUNTCD = value;
					this.SendPropertyChanged("ACCOUNTCD");
					this.OnACCOUNTCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STREETCD", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> STREETCD
		{
			get
			{
				return this._STREETCD;
			}
			set
			{
				if ((this._STREETCD != value))
				{
					if (this._STREET.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSTREETCDChanging(value);
					this.SendPropertyChanging();
					this._STREETCD = value;
					this.SendPropertyChanged("STREETCD");
					this.OnSTREETCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HOUSENO", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> HOUSENO
		{
			get
			{
				return this._HOUSENO;
			}
			set
			{
				if ((this._HOUSENO != value))
				{
					this.OnHOUSENOChanging(value);
					this.SendPropertyChanging();
					this._HOUSENO = value;
					this.SendPropertyChanged("HOUSENO");
					this.OnHOUSENOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FLATNO", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> FLATNO
		{
			get
			{
				return this._FLATNO;
			}
			set
			{
				if ((this._FLATNO != value))
				{
					this.OnFLATNOChanging(value);
					this.SendPropertyChanging();
					this._FLATNO = value;
					this.SendPropertyChanged("FLATNO");
					this.OnFLATNOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fio", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string Fio
		{
			get
			{
				return this._Fio;
			}
			set
			{
				if ((this._Fio != value))
				{
					this.OnFioChanging(value);
					this.SendPropertyChanging();
					this._Fio = value;
					this.SendPropertyChanged("Fio");
					this.OnFioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHONE", DbType="VarChar(6)", UpdateCheck=UpdateCheck.Never)]
		public string PHONE
		{
			get
			{
				return this._PHONE;
			}
			set
			{
				if ((this._PHONE != value))
				{
					this.OnPHONEChanging(value);
					this.SendPropertyChanging();
					this._PHONE = value;
					this.SendPropertyChanged("PHONE");
					this.OnPHONEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ABONENT_NACHISLSUMMA", Storage="_NACHISLSUMMA", ThisKey="ACCOUNTCD", OtherKey="ACCOUNTCD")]
		public EntitySet<NACHISLSUMMA> NACHISLSUMMA
		{
			get
			{
				return this._NACHISLSUMMA;
			}
			set
			{
				this._NACHISLSUMMA.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ABONENT_PAYSUMMA", Storage="_PAYSUMMA", ThisKey="ACCOUNTCD", OtherKey="ACCOUNTCD")]
		public EntitySet<PAYSUMMA> PAYSUMMA
		{
			get
			{
				return this._PAYSUMMA;
			}
			set
			{
				this._PAYSUMMA.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ABONENT_REQUEST", Storage="_REQUEST", ThisKey="ACCOUNTCD", OtherKey="ACCOUNTCD")]
		public EntitySet<REQUEST> REQUEST
		{
			get
			{
				return this._REQUEST;
			}
			set
			{
				this._REQUEST.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STREET_ABONENT", Storage="_STREET", ThisKey="STREETCD", OtherKey="STREETCD", IsForeignKey=true)]
		public STREET STREET
		{
			get
			{
				return this._STREET.Entity;
			}
			set
			{
				STREET previousValue = this._STREET.Entity;
				if (((previousValue != value) 
							|| (this._STREET.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STREET.Entity = null;
						previousValue.ABONENT.Remove(this);
					}
					this._STREET.Entity = value;
					if ((value != null))
					{
						value.ABONENT.Add(this);
						this._STREETCD = value.STREETCD;
					}
					else
					{
						this._STREETCD = default(Nullable<int>);
					}
					this.SendPropertyChanged("STREET");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NACHISLSUMMA(NACHISLSUMMA entity)
		{
			this.SendPropertyChanging();
			entity.ABONENT = this;
		}
		
		private void detach_NACHISLSUMMA(NACHISLSUMMA entity)
		{
			this.SendPropertyChanging();
			entity.ABONENT = null;
		}
		
		private void attach_PAYSUMMA(PAYSUMMA entity)
		{
			this.SendPropertyChanging();
			entity.ABONENT = this;
		}
		
		private void detach_PAYSUMMA(PAYSUMMA entity)
		{
			this.SendPropertyChanging();
			entity.ABONENT = null;
		}
		
		private void attach_REQUEST(REQUEST entity)
		{
			this.SendPropertyChanging();
			entity.ABONENT = this;
		}
		
		private void detach_REQUEST(REQUEST entity)
		{
			this.SendPropertyChanging();
			entity.ABONENT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DISREPAIR")]
	public partial class DISREPAIR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FAILURECD;
		
		private string _FAILURENM;
		
		private EntitySet<REQUEST> _REQUEST;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFAILURECDChanging(int value);
    partial void OnFAILURECDChanged();
    partial void OnFAILURENMChanging(string value);
    partial void OnFAILURENMChanged();
    #endregion
		
		public DISREPAIR()
		{
			this._REQUEST = new EntitySet<REQUEST>(new Action<REQUEST>(this.attach_REQUEST), new Action<REQUEST>(this.detach_REQUEST));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FAILURECD", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FAILURECD
		{
			get
			{
				return this._FAILURECD;
			}
			set
			{
				if ((this._FAILURECD != value))
				{
					this.OnFAILURECDChanging(value);
					this.SendPropertyChanging();
					this._FAILURECD = value;
					this.SendPropertyChanged("FAILURECD");
					this.OnFAILURECDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FAILURENM", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string FAILURENM
		{
			get
			{
				return this._FAILURENM;
			}
			set
			{
				if ((this._FAILURENM != value))
				{
					this.OnFAILURENMChanging(value);
					this.SendPropertyChanging();
					this._FAILURENM = value;
					this.SendPropertyChanged("FAILURENM");
					this.OnFAILURENMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISREPAIR_REQUEST", Storage="_REQUEST", ThisKey="FAILURECD", OtherKey="FAILURECD")]
		public EntitySet<REQUEST> REQUEST
		{
			get
			{
				return this._REQUEST;
			}
			set
			{
				this._REQUEST.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_REQUEST(REQUEST entity)
		{
			this.SendPropertyChanging();
			entity.DISREPAIR = this;
		}
		
		private void detach_REQUEST(REQUEST entity)
		{
			this.SendPropertyChanging();
			entity.DISREPAIR = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EXECUTOR")]
	public partial class EXECUTOR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EXECUTORCD;
		
		private string _Fio;
		
		private EntitySet<REQUEST> _REQUEST;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEXECUTORCDChanging(int value);
    partial void OnEXECUTORCDChanged();
    partial void OnFioChanging(string value);
    partial void OnFioChanged();
    #endregion
		
		public EXECUTOR()
		{
			this._REQUEST = new EntitySet<REQUEST>(new Action<REQUEST>(this.attach_REQUEST), new Action<REQUEST>(this.detach_REQUEST));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EXECUTORCD", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EXECUTORCD
		{
			get
			{
				return this._EXECUTORCD;
			}
			set
			{
				if ((this._EXECUTORCD != value))
				{
					this.OnEXECUTORCDChanging(value);
					this.SendPropertyChanging();
					this._EXECUTORCD = value;
					this.SendPropertyChanged("EXECUTORCD");
					this.OnEXECUTORCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fio", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string Fio
		{
			get
			{
				return this._Fio;
			}
			set
			{
				if ((this._Fio != value))
				{
					this.OnFioChanging(value);
					this.SendPropertyChanging();
					this._Fio = value;
					this.SendPropertyChanged("Fio");
					this.OnFioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EXECUTOR_REQUEST", Storage="_REQUEST", ThisKey="EXECUTORCD", OtherKey="EXECUTORCD")]
		public EntitySet<REQUEST> REQUEST
		{
			get
			{
				return this._REQUEST;
			}
			set
			{
				this._REQUEST.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_REQUEST(REQUEST entity)
		{
			this.SendPropertyChanging();
			entity.EXECUTOR = this;
		}
		
		private void detach_REQUEST(REQUEST entity)
		{
			this.SendPropertyChanging();
			entity.EXECUTOR = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NACHISLSUMMA")]
	public partial class NACHISLSUMMA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NACHISLFACTCD;
		
		private string _ACCOUNTCD;
		
		private int _SERVICECD;
		
		private System.Nullable<decimal> _NACHISLSUM;
		
		private System.Nullable<short> _NACHISLMONTH;
		
		private System.Nullable<short> _NACHISLYEAR;
		
		private EntityRef<ABONENT> _ABONENT;
		
		private EntityRef<SERVICES> _SERVICES;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNACHISLFACTCDChanging(int value);
    partial void OnNACHISLFACTCDChanged();
    partial void OnACCOUNTCDChanging(string value);
    partial void OnACCOUNTCDChanged();
    partial void OnSERVICECDChanging(int value);
    partial void OnSERVICECDChanged();
    partial void OnNACHISLSUMChanging(System.Nullable<decimal> value);
    partial void OnNACHISLSUMChanged();
    partial void OnNACHISLMONTHChanging(System.Nullable<short> value);
    partial void OnNACHISLMONTHChanged();
    partial void OnNACHISLYEARChanging(System.Nullable<short> value);
    partial void OnNACHISLYEARChanged();
    #endregion
		
		public NACHISLSUMMA()
		{
			this._ABONENT = default(EntityRef<ABONENT>);
			this._SERVICES = default(EntityRef<SERVICES>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NACHISLFACTCD", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NACHISLFACTCD
		{
			get
			{
				return this._NACHISLFACTCD;
			}
			set
			{
				if ((this._NACHISLFACTCD != value))
				{
					this.OnNACHISLFACTCDChanging(value);
					this.SendPropertyChanging();
					this._NACHISLFACTCD = value;
					this.SendPropertyChanged("NACHISLFACTCD");
					this.OnNACHISLFACTCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCOUNTCD", DbType="VarChar(6) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ACCOUNTCD
		{
			get
			{
				return this._ACCOUNTCD;
			}
			set
			{
				if ((this._ACCOUNTCD != value))
				{
					if (this._ABONENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACCOUNTCDChanging(value);
					this.SendPropertyChanging();
					this._ACCOUNTCD = value;
					this.SendPropertyChanged("ACCOUNTCD");
					this.OnACCOUNTCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SERVICECD", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SERVICECD
		{
			get
			{
				return this._SERVICECD;
			}
			set
			{
				if ((this._SERVICECD != value))
				{
					if (this._SERVICES.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSERVICECDChanging(value);
					this.SendPropertyChanging();
					this._SERVICECD = value;
					this.SendPropertyChanged("SERVICECD");
					this.OnSERVICECDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NACHISLSUM", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> NACHISLSUM
		{
			get
			{
				return this._NACHISLSUM;
			}
			set
			{
				if ((this._NACHISLSUM != value))
				{
					this.OnNACHISLSUMChanging(value);
					this.SendPropertyChanging();
					this._NACHISLSUM = value;
					this.SendPropertyChanged("NACHISLSUM");
					this.OnNACHISLSUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NACHISLMONTH", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> NACHISLMONTH
		{
			get
			{
				return this._NACHISLMONTH;
			}
			set
			{
				if ((this._NACHISLMONTH != value))
				{
					this.OnNACHISLMONTHChanging(value);
					this.SendPropertyChanging();
					this._NACHISLMONTH = value;
					this.SendPropertyChanged("NACHISLMONTH");
					this.OnNACHISLMONTHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NACHISLYEAR", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> NACHISLYEAR
		{
			get
			{
				return this._NACHISLYEAR;
			}
			set
			{
				if ((this._NACHISLYEAR != value))
				{
					this.OnNACHISLYEARChanging(value);
					this.SendPropertyChanging();
					this._NACHISLYEAR = value;
					this.SendPropertyChanged("NACHISLYEAR");
					this.OnNACHISLYEARChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ABONENT_NACHISLSUMMA", Storage="_ABONENT", ThisKey="ACCOUNTCD", OtherKey="ACCOUNTCD", IsForeignKey=true)]
		public ABONENT ABONENT
		{
			get
			{
				return this._ABONENT.Entity;
			}
			set
			{
				ABONENT previousValue = this._ABONENT.Entity;
				if (((previousValue != value) 
							|| (this._ABONENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ABONENT.Entity = null;
						previousValue.NACHISLSUMMA.Remove(this);
					}
					this._ABONENT.Entity = value;
					if ((value != null))
					{
						value.NACHISLSUMMA.Add(this);
						this._ACCOUNTCD = value.ACCOUNTCD;
					}
					else
					{
						this._ACCOUNTCD = default(string);
					}
					this.SendPropertyChanged("ABONENT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SERVICES_NACHISLSUMMA", Storage="_SERVICES", ThisKey="SERVICECD", OtherKey="SERVICECD", IsForeignKey=true)]
		public SERVICES SERVICES
		{
			get
			{
				return this._SERVICES.Entity;
			}
			set
			{
				SERVICES previousValue = this._SERVICES.Entity;
				if (((previousValue != value) 
							|| (this._SERVICES.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SERVICES.Entity = null;
						previousValue.NACHISLSUMMA.Remove(this);
					}
					this._SERVICES.Entity = value;
					if ((value != null))
					{
						value.NACHISLSUMMA.Add(this);
						this._SERVICECD = value.SERVICECD;
					}
					else
					{
						this._SERVICECD = default(int);
					}
					this.SendPropertyChanged("SERVICES");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PAYSUMMA")]
	public partial class PAYSUMMA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PAYFACTCD;
		
		private string _ACCOUNTCD;
		
		private int _SERVICECD;
		
		private System.Nullable<decimal> _PAYSUM;
		
		private System.Nullable<System.DateTime> _PAYDATE;
		
		private System.Nullable<short> _PAYMONTH;
		
		private System.Nullable<short> _PAYYEAR;
		
		private EntityRef<ABONENT> _ABONENT;
		
		private EntityRef<SERVICES> _SERVICES;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPAYFACTCDChanging(int value);
    partial void OnPAYFACTCDChanged();
    partial void OnACCOUNTCDChanging(string value);
    partial void OnACCOUNTCDChanged();
    partial void OnSERVICECDChanging(int value);
    partial void OnSERVICECDChanged();
    partial void OnPAYSUMChanging(System.Nullable<decimal> value);
    partial void OnPAYSUMChanged();
    partial void OnPAYDATEChanging(System.Nullable<System.DateTime> value);
    partial void OnPAYDATEChanged();
    partial void OnPAYMONTHChanging(System.Nullable<short> value);
    partial void OnPAYMONTHChanged();
    partial void OnPAYYEARChanging(System.Nullable<short> value);
    partial void OnPAYYEARChanged();
    #endregion
		
		public PAYSUMMA()
		{
			this._ABONENT = default(EntityRef<ABONENT>);
			this._SERVICES = default(EntityRef<SERVICES>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAYFACTCD", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PAYFACTCD
		{
			get
			{
				return this._PAYFACTCD;
			}
			set
			{
				if ((this._PAYFACTCD != value))
				{
					this.OnPAYFACTCDChanging(value);
					this.SendPropertyChanging();
					this._PAYFACTCD = value;
					this.SendPropertyChanged("PAYFACTCD");
					this.OnPAYFACTCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCOUNTCD", DbType="VarChar(6) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ACCOUNTCD
		{
			get
			{
				return this._ACCOUNTCD;
			}
			set
			{
				if ((this._ACCOUNTCD != value))
				{
					if (this._ABONENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACCOUNTCDChanging(value);
					this.SendPropertyChanging();
					this._ACCOUNTCD = value;
					this.SendPropertyChanged("ACCOUNTCD");
					this.OnACCOUNTCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SERVICECD", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SERVICECD
		{
			get
			{
				return this._SERVICECD;
			}
			set
			{
				if ((this._SERVICECD != value))
				{
					if (this._SERVICES.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSERVICECDChanging(value);
					this.SendPropertyChanging();
					this._SERVICECD = value;
					this.SendPropertyChanged("SERVICECD");
					this.OnSERVICECDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAYSUM", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> PAYSUM
		{
			get
			{
				return this._PAYSUM;
			}
			set
			{
				if ((this._PAYSUM != value))
				{
					this.OnPAYSUMChanging(value);
					this.SendPropertyChanging();
					this._PAYSUM = value;
					this.SendPropertyChanged("PAYSUM");
					this.OnPAYSUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAYDATE", DbType="Date", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PAYDATE
		{
			get
			{
				return this._PAYDATE;
			}
			set
			{
				if ((this._PAYDATE != value))
				{
					this.OnPAYDATEChanging(value);
					this.SendPropertyChanging();
					this._PAYDATE = value;
					this.SendPropertyChanged("PAYDATE");
					this.OnPAYDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAYMONTH", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> PAYMONTH
		{
			get
			{
				return this._PAYMONTH;
			}
			set
			{
				if ((this._PAYMONTH != value))
				{
					this.OnPAYMONTHChanging(value);
					this.SendPropertyChanging();
					this._PAYMONTH = value;
					this.SendPropertyChanged("PAYMONTH");
					this.OnPAYMONTHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAYYEAR", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> PAYYEAR
		{
			get
			{
				return this._PAYYEAR;
			}
			set
			{
				if ((this._PAYYEAR != value))
				{
					this.OnPAYYEARChanging(value);
					this.SendPropertyChanging();
					this._PAYYEAR = value;
					this.SendPropertyChanged("PAYYEAR");
					this.OnPAYYEARChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ABONENT_PAYSUMMA", Storage="_ABONENT", ThisKey="ACCOUNTCD", OtherKey="ACCOUNTCD", IsForeignKey=true)]
		public ABONENT ABONENT
		{
			get
			{
				return this._ABONENT.Entity;
			}
			set
			{
				ABONENT previousValue = this._ABONENT.Entity;
				if (((previousValue != value) 
							|| (this._ABONENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ABONENT.Entity = null;
						previousValue.PAYSUMMA.Remove(this);
					}
					this._ABONENT.Entity = value;
					if ((value != null))
					{
						value.PAYSUMMA.Add(this);
						this._ACCOUNTCD = value.ACCOUNTCD;
					}
					else
					{
						this._ACCOUNTCD = default(string);
					}
					this.SendPropertyChanged("ABONENT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SERVICES_PAYSUMMA", Storage="_SERVICES", ThisKey="SERVICECD", OtherKey="SERVICECD", IsForeignKey=true)]
		public SERVICES SERVICES
		{
			get
			{
				return this._SERVICES.Entity;
			}
			set
			{
				SERVICES previousValue = this._SERVICES.Entity;
				if (((previousValue != value) 
							|| (this._SERVICES.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SERVICES.Entity = null;
						previousValue.PAYSUMMA.Remove(this);
					}
					this._SERVICES.Entity = value;
					if ((value != null))
					{
						value.PAYSUMMA.Add(this);
						this._SERVICECD = value.SERVICECD;
					}
					else
					{
						this._SERVICECD = default(int);
					}
					this.SendPropertyChanged("SERVICES");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REQUEST")]
	public partial class REQUEST : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _REQUESTCD;
		
		private string _ACCOUNTCD;
		
		private System.Nullable<int> _EXECUTORCD;
		
		private System.Nullable<int> _FAILURECD;
		
		private System.DateTime _INCOMINGDATE;
		
		private System.Nullable<System.DateTime> _EXECUTIONDATE;
		
		private System.Nullable<short> _EXECUTED;
		
		private EntityRef<ABONENT> _ABONENT;
		
		private EntityRef<EXECUTOR> _EXECUTOR;
		
		private EntityRef<DISREPAIR> _DISREPAIR;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnREQUESTCDChanging(int value);
    partial void OnREQUESTCDChanged();
    partial void OnACCOUNTCDChanging(string value);
    partial void OnACCOUNTCDChanged();
    partial void OnEXECUTORCDChanging(System.Nullable<int> value);
    partial void OnEXECUTORCDChanged();
    partial void OnFAILURECDChanging(System.Nullable<int> value);
    partial void OnFAILURECDChanged();
    partial void OnINCOMINGDATEChanging(System.DateTime value);
    partial void OnINCOMINGDATEChanged();
    partial void OnEXECUTIONDATEChanging(System.Nullable<System.DateTime> value);
    partial void OnEXECUTIONDATEChanged();
    partial void OnEXECUTEDChanging(System.Nullable<short> value);
    partial void OnEXECUTEDChanged();
    #endregion
		
		public REQUEST()
		{
			this._ABONENT = default(EntityRef<ABONENT>);
			this._EXECUTOR = default(EntityRef<EXECUTOR>);
			this._DISREPAIR = default(EntityRef<DISREPAIR>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_REQUESTCD", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int REQUESTCD
		{
			get
			{
				return this._REQUESTCD;
			}
			set
			{
				if ((this._REQUESTCD != value))
				{
					this.OnREQUESTCDChanging(value);
					this.SendPropertyChanging();
					this._REQUESTCD = value;
					this.SendPropertyChanged("REQUESTCD");
					this.OnREQUESTCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCOUNTCD", DbType="VarChar(6)", UpdateCheck=UpdateCheck.Never)]
		public string ACCOUNTCD
		{
			get
			{
				return this._ACCOUNTCD;
			}
			set
			{
				if ((this._ACCOUNTCD != value))
				{
					if (this._ABONENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACCOUNTCDChanging(value);
					this.SendPropertyChanging();
					this._ACCOUNTCD = value;
					this.SendPropertyChanged("ACCOUNTCD");
					this.OnACCOUNTCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EXECUTORCD", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EXECUTORCD
		{
			get
			{
				return this._EXECUTORCD;
			}
			set
			{
				if ((this._EXECUTORCD != value))
				{
					if (this._EXECUTOR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEXECUTORCDChanging(value);
					this.SendPropertyChanging();
					this._EXECUTORCD = value;
					this.SendPropertyChanged("EXECUTORCD");
					this.OnEXECUTORCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FAILURECD", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FAILURECD
		{
			get
			{
				return this._FAILURECD;
			}
			set
			{
				if ((this._FAILURECD != value))
				{
					if (this._DISREPAIR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFAILURECDChanging(value);
					this.SendPropertyChanging();
					this._FAILURECD = value;
					this.SendPropertyChanged("FAILURECD");
					this.OnFAILURECDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_INCOMINGDATE", DbType="Date NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime INCOMINGDATE
		{
			get
			{
				return this._INCOMINGDATE;
			}
			set
			{
				if ((this._INCOMINGDATE != value))
				{
					this.OnINCOMINGDATEChanging(value);
					this.SendPropertyChanging();
					this._INCOMINGDATE = value;
					this.SendPropertyChanged("INCOMINGDATE");
					this.OnINCOMINGDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EXECUTIONDATE", DbType="Date", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EXECUTIONDATE
		{
			get
			{
				return this._EXECUTIONDATE;
			}
			set
			{
				if ((this._EXECUTIONDATE != value))
				{
					this.OnEXECUTIONDATEChanging(value);
					this.SendPropertyChanging();
					this._EXECUTIONDATE = value;
					this.SendPropertyChanged("EXECUTIONDATE");
					this.OnEXECUTIONDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EXECUTED", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> EXECUTED
		{
			get
			{
				return this._EXECUTED;
			}
			set
			{
				if ((this._EXECUTED != value))
				{
					this.OnEXECUTEDChanging(value);
					this.SendPropertyChanging();
					this._EXECUTED = value;
					this.SendPropertyChanged("EXECUTED");
					this.OnEXECUTEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ABONENT_REQUEST", Storage="_ABONENT", ThisKey="ACCOUNTCD", OtherKey="ACCOUNTCD", IsForeignKey=true)]
		public ABONENT ABONENT
		{
			get
			{
				return this._ABONENT.Entity;
			}
			set
			{
				ABONENT previousValue = this._ABONENT.Entity;
				if (((previousValue != value) 
							|| (this._ABONENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ABONENT.Entity = null;
						previousValue.REQUEST.Remove(this);
					}
					this._ABONENT.Entity = value;
					if ((value != null))
					{
						value.REQUEST.Add(this);
						this._ACCOUNTCD = value.ACCOUNTCD;
					}
					else
					{
						this._ACCOUNTCD = default(string);
					}
					this.SendPropertyChanged("ABONENT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EXECUTOR_REQUEST", Storage="_EXECUTOR", ThisKey="EXECUTORCD", OtherKey="EXECUTORCD", IsForeignKey=true)]
		public EXECUTOR EXECUTOR
		{
			get
			{
				return this._EXECUTOR.Entity;
			}
			set
			{
				EXECUTOR previousValue = this._EXECUTOR.Entity;
				if (((previousValue != value) 
							|| (this._EXECUTOR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EXECUTOR.Entity = null;
						previousValue.REQUEST.Remove(this);
					}
					this._EXECUTOR.Entity = value;
					if ((value != null))
					{
						value.REQUEST.Add(this);
						this._EXECUTORCD = value.EXECUTORCD;
					}
					else
					{
						this._EXECUTORCD = default(Nullable<int>);
					}
					this.SendPropertyChanged("EXECUTOR");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISREPAIR_REQUEST", Storage="_DISREPAIR", ThisKey="FAILURECD", OtherKey="FAILURECD", IsForeignKey=true)]
		public DISREPAIR DISREPAIR
		{
			get
			{
				return this._DISREPAIR.Entity;
			}
			set
			{
				DISREPAIR previousValue = this._DISREPAIR.Entity;
				if (((previousValue != value) 
							|| (this._DISREPAIR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DISREPAIR.Entity = null;
						previousValue.REQUEST.Remove(this);
					}
					this._DISREPAIR.Entity = value;
					if ((value != null))
					{
						value.REQUEST.Add(this);
						this._FAILURECD = value.FAILURECD;
					}
					else
					{
						this._FAILURECD = default(Nullable<int>);
					}
					this.SendPropertyChanged("DISREPAIR");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SERVICES")]
	public partial class SERVICES : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SERVICECD;
		
		private string _SERVICENM;
		
		private EntitySet<NACHISLSUMMA> _NACHISLSUMMA;
		
		private EntitySet<PAYSUMMA> _PAYSUMMA;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSERVICECDChanging(int value);
    partial void OnSERVICECDChanged();
    partial void OnSERVICENMChanging(string value);
    partial void OnSERVICENMChanged();
    #endregion
		
		public SERVICES()
		{
			this._NACHISLSUMMA = new EntitySet<NACHISLSUMMA>(new Action<NACHISLSUMMA>(this.attach_NACHISLSUMMA), new Action<NACHISLSUMMA>(this.detach_NACHISLSUMMA));
			this._PAYSUMMA = new EntitySet<PAYSUMMA>(new Action<PAYSUMMA>(this.attach_PAYSUMMA), new Action<PAYSUMMA>(this.detach_PAYSUMMA));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SERVICECD", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SERVICECD
		{
			get
			{
				return this._SERVICECD;
			}
			set
			{
				if ((this._SERVICECD != value))
				{
					this.OnSERVICECDChanging(value);
					this.SendPropertyChanging();
					this._SERVICECD = value;
					this.SendPropertyChanged("SERVICECD");
					this.OnSERVICECDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SERVICENM", DbType="VarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string SERVICENM
		{
			get
			{
				return this._SERVICENM;
			}
			set
			{
				if ((this._SERVICENM != value))
				{
					this.OnSERVICENMChanging(value);
					this.SendPropertyChanging();
					this._SERVICENM = value;
					this.SendPropertyChanged("SERVICENM");
					this.OnSERVICENMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SERVICES_NACHISLSUMMA", Storage="_NACHISLSUMMA", ThisKey="SERVICECD", OtherKey="SERVICECD")]
		public EntitySet<NACHISLSUMMA> NACHISLSUMMA
		{
			get
			{
				return this._NACHISLSUMMA;
			}
			set
			{
				this._NACHISLSUMMA.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SERVICES_PAYSUMMA", Storage="_PAYSUMMA", ThisKey="SERVICECD", OtherKey="SERVICECD")]
		public EntitySet<PAYSUMMA> PAYSUMMA
		{
			get
			{
				return this._PAYSUMMA;
			}
			set
			{
				this._PAYSUMMA.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NACHISLSUMMA(NACHISLSUMMA entity)
		{
			this.SendPropertyChanging();
			entity.SERVICES = this;
		}
		
		private void detach_NACHISLSUMMA(NACHISLSUMMA entity)
		{
			this.SendPropertyChanging();
			entity.SERVICES = null;
		}
		
		private void attach_PAYSUMMA(PAYSUMMA entity)
		{
			this.SendPropertyChanging();
			entity.SERVICES = this;
		}
		
		private void detach_PAYSUMMA(PAYSUMMA entity)
		{
			this.SendPropertyChanging();
			entity.SERVICES = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STREET")]
	public partial class STREET : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _STREETCD;
		
		private string _STREETNM;
		
		private EntitySet<ABONENT> _ABONENT;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSTREETCDChanging(int value);
    partial void OnSTREETCDChanged();
    partial void OnSTREETNMChanging(string value);
    partial void OnSTREETNMChanged();
    #endregion
		
		public STREET()
		{
			this._ABONENT = new EntitySet<ABONENT>(new Action<ABONENT>(this.attach_ABONENT), new Action<ABONENT>(this.detach_ABONENT));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STREETCD", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int STREETCD
		{
			get
			{
				return this._STREETCD;
			}
			set
			{
				if ((this._STREETCD != value))
				{
					this.OnSTREETCDChanging(value);
					this.SendPropertyChanging();
					this._STREETCD = value;
					this.SendPropertyChanged("STREETCD");
					this.OnSTREETCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STREETNM", DbType="VarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string STREETNM
		{
			get
			{
				return this._STREETNM;
			}
			set
			{
				if ((this._STREETNM != value))
				{
					this.OnSTREETNMChanging(value);
					this.SendPropertyChanging();
					this._STREETNM = value;
					this.SendPropertyChanged("STREETNM");
					this.OnSTREETNMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STREET_ABONENT", Storage="_ABONENT", ThisKey="STREETCD", OtherKey="STREETCD")]
		public EntitySet<ABONENT> ABONENT
		{
			get
			{
				return this._ABONENT;
			}
			set
			{
				this._ABONENT.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ABONENT(ABONENT entity)
		{
			this.SendPropertyChanging();
			entity.STREET = this;
		}
		
		private void detach_ABONENT(ABONENT entity)
		{
			this.SendPropertyChanging();
			entity.STREET = null;
		}
	}
}
#pragma warning restore 1591
